{"ts":1359602798936,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Inspired by https://github.com/tlrobinson/long-stack-traces\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nfunction extendTrace(object, property, pos) {\n    var old = object[property];\n    object[property] = function() {\n        var error = new Error();\n        var name = object.constructor.name + '#' + property + '(' + \n            Array.prototype.slice.call(arguments).map(function(el) {\n                return util.inspect(el, false, 0);\n            }).join(', ') + ')';\n\n        if (typeof pos === 'undefined') pos = -1;\n        if (pos < 0) pos += arguments.length;\n        var cb = arguments[pos];\n        if (typeof arguments[pos] === 'function') {\n            arguments[pos] = function replacement() {\n                try {\n                    return cb.apply(this, arguments);\n                } catch (err) {\n                    if (err && err.stack && !err.__augmented) {\n                        err.stack = filter(err).join('\\n');\n                        err.stack += '\\n--> in ' + name;\n                        err.stack += '\\n' + filter(error).slice(1).join('\\n');\n                        err.__augmented = true;\n                    }\n                    throw err;\n                }\n            };\n        }\n        return old.apply(this, arguments);\n    };\n}\nexports.extendTrace = extendTrace;\n\n\nfunction filter(error) {\n    return error.stack.split('\\n').filter(function(line) {\n        return line.indexOf(__filename) < 0;\n    });\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":1488}]],"length":1488}
